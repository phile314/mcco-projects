-- | Attribute grammar for type checking t-diagrams

module {Diag2Picture.Inline}{}{
import CCO.Diag (Diag(..), Diag_(..), DeclS, Decl)
import Data.Map (insert, (!), Map, empty)
import Data.Maybe (fromMaybe)
}

include "../CCO/Diag/AG.ag"

-- | Makes available the position in order for error messages.
attr Diag_ inh pos :: {SourcePos}
attr Diag syn pos :: {SourcePos}

sem Diag
  | Diag d.pos = @pos
         lhs.pos = @pos

-- | The type of a t-diagram.
-- The type returned is correct only if no error massage is raised.
attr Diag_ Diag DeclS Decl

  syn ndiag :: self
  chn env :: {Map String Diag}
  syn repl use {(\_ _ -> Nothing)} {Nothing} :: {Maybe Diag}



-- Add right hand side element of Compile element (becomes CompileI)
sem Diag
  | Diag lhs.ndiag = fromMaybe @ndiag @d.repl

sem Diag_
  | Let lhs.env = @lhs.env
        lhs.repl = {Just @in.ndiag}
  | VarAccess lhs.repl = {Just $ @lhs.env ! @v}

sem Decl
  | Tuple lhs.env = insert @x1 @x2.ndiag @lhs.env 

{
foldTree :: Diag -> Diag
foldTree d = ndiag_Syn_Diag $ wrap_Diag (sem_Diag d) inh
    where inh = Inh_Diag empty
}
