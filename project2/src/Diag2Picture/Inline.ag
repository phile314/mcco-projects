-- | Attribute grammar for inlining variables.

module {Diag2Picture.Inline}{}{
import CCO.Diag (Diag(..), Diag_(..), DeclS, Decl)
import Data.Map (insert, (!), Map, empty)
import Data.Maybe (fromMaybe)
}

include "../CCO/Diag/AG.ag"

attr Diag_ Diag DeclS Decl

  -- the new diagram.
  syn ndiag :: self

  -- the environment.
  chn env :: {Map String Diag}

  -- if set, will be used as replacement value for the current node. we cannot
  -- directly return is as ndiag, because the Diag/Diag_ types would clash.
  syn repl use {(\_ _ -> Nothing)} {Nothing} :: {Maybe Diag}



sem Diag
  | Diag lhs.ndiag = fromMaybe @ndiag @d.repl

sem Diag_
  | Let lhs.env = @lhs.env
        lhs.repl = {Just @in.ndiag}
  | VarAccess lhs.repl = {Just $ @lhs.env ! @v}

sem Decl
  | Tuple lhs.env = insert @x1 @x2.ndiag @lhs.env 

{
-- | Inlines all variables in the given diagram. If the
--   input diagram did type check, this operation
--   always succeeds.
inline :: Diag -> Diag
inline d = ndiag_Syn_Diag $ wrap_Diag (sem_Diag d) inh
    where inh = Inh_Diag empty
}
