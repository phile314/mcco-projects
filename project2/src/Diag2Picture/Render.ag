-- | Attribute grammar for type checking t-diagrams

module {Diag2Picture.Render}{}{
import CCO.Diag (Diag(..), Diag_(..))
import CCO.Picture
import Debug.Trace
}

{
type Vec2 = (Double, Double)
type Size = Vec2

ovlp = 10
}

include "../CCO/Diag/AG.ag"

-- | Makes available the position in order for error messages.
attr Diag_ inh pos :: {SourcePos}
attr Diag syn pos :: {SourcePos}

sem Diag
  | Diag d.pos = @pos
         lhs.pos = @pos

attr Diag_ Diag
  syn pict :: {[Command]}
  syn size :: {Size}
  -- First element is x offset of left lower connection point, second element is distance from left to right connection point OUTDATED.
  syn conns :: {(Maybe Vec2, Maybe Vec2)}


sem Diag_
  | Program lhs.conns = (Nothing, Just (7.5, 50))
            lhs.size  = (65, 30)
            lhs.pict  = mkProg @l @p
  | Platform lhs.conns = (Just (0, 50), Nothing)
             lhs.size  = (50, 30)
             lhs.pict  = mkPlat @m
  | Interpreter lhs.conns = (Just (0, 50), Just(0, 50))
                lhs.size  = (50, 30)
                lhs.pict  = mkIntp @m @l @i
  | Compiler lhs.conns = (Just (0, 150), Just(50, 50))
             lhs.size  = (150, 30)
             lhs.pict  = mkCmpl @m @l1 @l2 @c

  | Execute  (lhs.conns, lhs.size, lhs.pict) = 
                         { let (x1, y1) = @d1.size
                               (x2, y2) = @d2.size
                               (c1, Just (cc1, cd1)) = @d1.conns
                               (Just (ca2, cb2), c2) = @d2.conns
                               p1 = (0, y2)
                               p2 = (cc1, 0)
                           in ((translateC p1 c1, translateC p2 c2),
                               (x1, y1 + y2),
                               (translate p1 @d1.pict) ++ (translate p2 @d2.pict))
                         }
  | CompileI (lhs.conns, lhs.size, lhs.pict) =
                        { let (x1, y1) = @d1.size
                              (x2, y2) = @d2.size
                              (x3, y3) = @d3.size
                              (_, Just (cc1, cd1))  = @d1.conns
                              (Just (ca2, cb2), c2) = @d2.conns
                              (c3, Just (cc3, cd3)) = @d3.conns
                              p1 = (max (ca2 - cc1 - cd1) 0, y2 - ovlp)
                              p2@(p2x, _) = (max (cc1 + cd1 - ca2) 0, 0)
                              p3 = (p2x + ca2 + cb2 - cc3, y2 - ovlp)
                          in ((translateC p3 c3, translateC p2 c2),
                              (cc1 + cd1 + cb2 + (x3 - cc3), y2 + (max y1 y3) - ovlp),
                              (translate p1 @d1.pict) ++ (translate p2 @d2.pict) ++ (translate p3 @d3.pict))
                        }

{           


translateC :: Vec2 -> Maybe Vec2 -> Maybe Vec2
translateC _ Nothing = Nothing
translateC (dx, _) (Just (a, b)) = Just (a + dx, b)


translate :: Vec2 -> [Command] -> [Command]
translate (dx, dy) cs = map f cs
  where f (Put (x, y) a) = Put (x + dx, y + dy) a

mkProg :: String -> String -> [Command]
mkProg l n =
    [ Put (7.5, 0)      (Line (1,0)  50)
    , Put (7.5, 0)      (Line (0,1)  15)
    , Put (7.5, 15)     (Line (-1,2) 7.5)
    , Put (57.5, 15)    (Line (1,2)  7.5)
    , Put (57.5, 0)     (Line (0,1)  15)
    , Put (0, 30)       (Line (1,0)  65)
    , Put (7.5, 15)     (Makebox (50, 15) n)
    , Put (7.5, 0)      (Makebox (50, 15) l)]

mkPlat :: String -> [Command]
mkPlat l =
    [ Put (0, 15)       (Line (5,-3)  25)
    , Put (25, 0)       (Line (5,3)   25)
    , Put (0, 15)       (Line (0,1)   15)
    , Put (0, 30)       (Line (1,0)   50)
    , Put (50, 30)      (Line (0,-1)  15)
    , Put (0,15)        (Makebox (50,15) l)]

mkIntp :: String -> String -> String -> [Command]
mkIntp m l n =
    [ Put (0, 0)        (Framebox (50,30) "")
    , Put (0, 20)       (Makebox (50,10) l)
    , Put (0, 10)       (Makebox (50,10) n)
    , Put (0, 0)        (Makebox (50,10) m)]

mkCmpl :: String -> String -> String -> String -> [Command]
mkCmpl m l1 l2 n =
    [ Put (50, 0)       (Line (0,1) 20)
    , Put (50, 20)      (Line (-1,0) 50)
    , Put (0, 20)       (Line (0,1) 10)
    , Put (0, 30)       (Line (1,0) 150)
    , Put (150, 30)     (Line (0,-1) 10)
    , Put (150, 20)     (Line (-1,0) 50)
    , Put (100, 20)     (Line (0,-1) 20)
    , Put (100, 0)      (Line (-1,0) 50)
    , Put (0, 20)       (Makebox (50,10) l1)
    , Put (50, 20)      (Makebox (50,10) "$\\longrightarrow$")
    , Put (100, 20)     (Makebox (50,10) l2)
    , Put (50, 10)      (Makebox (50,10) n)
    , Put (50, 0)       (Makebox (50,10) m)]

foldTree :: Diag -> Picture
foldTree d = Picture (size_Syn_Diag run) (pict_Syn_Diag run)
    where run = wrap_Diag (sem_Diag d) inh
          inh = Inh_Diag
}
