imports
{
import CCO.SourcePos        (SourcePos)
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

{
type Ident = String
}

data Diag_
  | VarAccess    v  :: String
  | Let          d  :: {[(String, Diag)]}      in :: Diag
  | Program      p  :: {Ident}  l  :: {Ident}
  | Platform     m  :: {Ident}
  | Interpreter  i  :: {Ident}  l  :: {Ident}  m  :: {Ident}
  | Compiler     c  :: {Ident}  l1 :: {Ident}  l2 :: {Ident}  m :: {Ident}
  | Execute      d1 :: Diag     d2 :: Diag
  | Compile      d1 :: Diag     d2 :: Diag
{- internal type, used to explicitly add right hand side of a compile to the tree -}
  | CompileI     d1 :: Diag     d2 :: Diag    d3 :: Diag
deriving Diag_ : Show

data Diag
  | Diag  pos  :: {SourcePos}  d :: Diag_
deriving Diag : Show
