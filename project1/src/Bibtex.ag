imports
{
import CCO.Tree (ATerm (App), Tree (fromTree, toTree))
import CCO.Tree.Parser (parseTree, app, arg, list, TreeParser)
import Control.Applicative
}

{ 
type Key = String
}

data BibtexDb
    | BibtexDb entries :: {[BibtexEntry]}

data BibtexEntry
    | Entry etype :: Type key :: Key emap :: KVList

type KVList = [ {(Field, String)} ]

data Field
    | Address
    | Annote
    | Author
    | Booktitle
    | Chapter
    | Crossref
    | Edition
    | Editor
    | HowPublished
    | Institution
    | Journal
    | Key
    | Month
    | Note
    | Number
    | Organization
    | Pages
    | Publisher
    | School
    | Series
    | Title
    | Type
    | Volume
    | Year
--    | Unknown fieldName :: String

data Type
  | Article
  | Book
  | Booklet
  | Conference
  | Inbook
  | Incollection
  | Inproceedings
  | Manual
  | Masterthesis
  | Misc
  | Phdthesis
  | Proceedings
  | Techreport
  | Unpublished

set Every = BibtexDb BibtexEntry Field
deriving Every : Show, Eq
deriving Field : Show, Eq, Enum
deriving Type : Show, Eq, Enum

{-attr BibtexDb
    syn html :: HtmlTree

sem BibtexEntry
-}





{
--------------------------------------------------------------------------------
--- ATerm
--------------------------------------------------------------------------------

instance Tree BibtexDb where
    fromTree (BibtexDb es) = App "BibtexDb" [fromTree es]
    toTree = parseTree [app "BibtexDb" (BibtexDb <$> arg)]

instance Tree BibtexEntry where
    fromTree (Entry t k fv) = App "Entry" [fromTree t, fromTree k, fromTree fv]
    toTree = parseTree [app "Entry" (Entry <$> arg <*> arg <*> arg)]

instance Tree Field where
    fromTree f = App (show f) []
    -- should we use the parser stuff here too?
    toTree = parseTree ps
      where ps = map pCons (enumFrom Address)

instance Tree Type where
  fromTree t = App (show t) []
  toTree = parseTree ps
      where ps = map pCons (enumFrom Article)

-- | A 'TreeParser' for single showable constructors.
pCons :: (Show a, Tree a) => a -> TreeParser a
pCons c = app (show c) (pure c) 
}
