-- | The attribute grammar used for converting a 'BibtexDb' in 'Html'.

imports
{
import CCO.Tree (ATerm (App), Tree (fromTree, toTree))
import CCO.Tree.Parser (parseTree, app, arg, list, TreeParser)
import Control.Applicative
import HtmlTree
import CCO.Feedback
import Bibtex.Basic
}

-- | A bibtex database is a list of 
data BibtexDb
    | BibtexDb entries :: BibtexEntryS

data BibtexEntry
    | Entry etype :: Type key :: Key emap :: { [(Field, String)] }

type BibtexEntryS = [BibtexEntry]

set Every = BibtexDb BibtexEntryS BibtexEntry
deriving Every : Show, Eq

attr Every
    syn html use {++} {[]} :: {[HtmlTree]}
    syn msgs use {++} {[]} :: {[Message]}

sem BibtexDb
    | BibtexDb lhs.html = { [Elem "db" @entries.html [] ]}

sem BibtexEntry
    | Entry lhs.html = { entryToHtml @etype @emap }
            lhs.msgs = { validateFields @etype @emap }

{

htmlAttr = html_Syn_BibtexDb
msgsAttr = msgs_Syn_BibtexDb

-- | Walks the tree and returns the computed attributes.
walkTree :: BibtexDb -> Syn_BibtexDb
walkTree db = wrap_BibtexDb (sem_BibtexDb db) Inh_BibtexDb


validateFields :: Type -> [(Field, String)] -> [Message]
validateFields _ _ = []


entryToHtml :: Type -> [(Field, String)] -> [Node]
entryToHtml _ fs = [Elem "entry" (map (Text . show) fs) []]

}


{
--------------------------------------------------------------------------------
--- ATerm
--------------------------------------------------------------------------------

instance Tree BibtexDb where
    fromTree (BibtexDb es) = App "BibtexDb" [fromTree es]
    toTree = parseTree [app "BibtexDb" (BibtexDb <$> arg)]

instance Tree BibtexEntry where
    fromTree (Entry t k fv) = App "Entry" [fromTree t, fromTree k, fromTree fv]
    toTree = parseTree [app "Entry" (Entry <$> arg <*> arg <*> arg)]

}
