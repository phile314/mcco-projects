imports
{
import CCO.Tree (ATerm (App), Tree (fromTree, toTree))
import CCO.Tree.Parser (parseTree, app, arg, list, TreeParser)
import Control.Applicative
import HtmlTree
import CCO.Feedback
import Bibtex.Basic
}

data BibtexDb
    | BibtexDb entries :: {[BibtexEntry]}

data BibtexEntry
    | Entry etype :: Type key :: Key emap :: { [(Field, String)] }



set Every = BibtexDb BibtexEntry
deriving Every : Show, Eq


attr Every
    syn html :: HtmlTree
    syn msgs use {++} {[]} :: {[Message]}

sem BibtexDb
    | BibtexDb lhs.html = { undefined @entries }

sem BibtexEntry
    | Entry lhs.html = { toHtml2 @etype @emap }
            lhs.msgs = { validateFields @etype @emap }

{

toHtml2 = undefined
validateFields = undefined

}


{
--------------------------------------------------------------------------------
--- ATerm
--------------------------------------------------------------------------------

instance Tree BibtexDb where
    fromTree (BibtexDb es) = App "BibtexDb" [fromTree es]
    toTree = parseTree [app "BibtexDb" (BibtexDb <$> arg)]

instance Tree BibtexEntry where
    fromTree (Entry t k fv) = App "Entry" [fromTree t, fromTree k, fromTree fv]
    toTree = parseTree [app "Entry" (Entry <$> arg <*> arg <*> arg)]

}
