--   The bibtex field specification is constructed as a tree, and then a tree
--   fold/walk is performed using the given field names/values as input. The output
--   is the generated bib and warning/error messages. All error/warning messages
--   are collected even if an error is encountered. The AG returns the same bibtex
--   entry in which the fields are ordered according the specification.
--   Invalid or conflicting fields are removed. If required fields are missing
--   the bibtex entry returned is undefined. For this reason the outside world
--   can access to this result only through the 'Feedback' monad.

module {BibHtml.Validator} {
    validate
  , Syn_SpecTree

  , walkTree
  , isAvail

  -- FIX
  , getBib
  , getMsgs
  , getAvail
}

{
import Bibtex
import BibHtml.Spec.Internal
import CCO.Feedback
import CCO.Printing (text)
import Data.Map hiding (map)
import BibHtml.BibtexSpec (spec)
import Control.Monad (filterM)
}

include "Spec/Internal.ag"

-------------------------------------------------------------------------------
-- Validator
-------------------------------------------------------------------------------
{
-- | A class for objects that can be validate
class Validate a where
  -- | Perform a validation. The result is wrapped in the Feedback monad
  -- to encode error and warning messages and failure.
  validate :: a -> Feedback a

instance Validate BibtexDb where
  -- | Validates a 'BibtexDb'.
  validate (BibtexDb db) = dropUnknownTypes db >>= mapM validate >>= return . BibtexDb

instance Validate BibtexEntry where
  -- | Validates a 'BibtexEntry'.
  -- If the validation succeeds the given bitex entry is returned, with
  -- the fields ordered according to the specification for its type.
  -- Unknown fields or conflicting fields will be removed.
  validate e@(Entry t k _) = messages msgs >> return (Entry t k fs)
    where fs = getBib res
          res = walkTree e (spec t)
          msgs = getMsgs res

-- | Removes all entries with an unknown type and emits a warning for each such entry.
dropUnknownTypes :: [BibtexEntry] -> Feedback [BibtexEntry]
dropUnknownTypes = filterM f
  where f (Entry (UnknownType t) k _) = do
            warn 1 $ "Ignoring entry " ++ k ++ " because the type " ++ t ++ " is not supported."
            return False
        f e = return True
}
-------------------------------------------------------------------------------
-- Attribute Grammar
-------------------------------------------------------------------------------
attr SpecTree
    syn avail use {&&} {True} :: Bool
    syn bib use {++} {[]} :: { [(Field, String)] } 
    syn msgs use {++} {[]} :: { [Message] }
    syn reqStr use {++} {""} :: String
    inh etype :: Type
    inh fields :: {Map Field String}
    inh key :: Key

sem SpecTree
  | Either lhs.avail = { @left.avail || @right.avail }
           lhs.msgs = { case (@left.avail, @right.avail) of
                            (True, True)   -> [mutuallyExclusive @left.reqStr @right.reqStr @lhs.key | @warnBoth]
                            (False, False) -> [bothMissing @left.reqStr @right.reqStr @lhs.key]
                            _              -> [] }
           lhs.bib = { case (@left.avail, @right.avail) of
                            (True, _)      -> @left.bib
                            (False, True)  -> @right.bib }
             lhs.reqStr = { "(" ++ @left.reqStr ++ " or " ++ @right.reqStr ++ ")"}
    | Optional lhs.msgs = { if @child.avail then @child.msgs else [] }
               lhs.bib = { if @child.avail then @child.bib else [] }
               lhs.avail = True
               lhs.reqStr = ""
    | Exactly lhs.avail = { @field `member` @lhs.fields }
              lhs.msgs = { if not (@field `member` @lhs.fields) then [missing @field @lhs.key] else []}
              lhs.bib = {[(@field, @lhs.fields ! @field)]}  -- Direct access
              lhs.reqStr = { show @field }
    | Both lhs.reqStr = { "(" ++ @left.reqStr ++ " and " ++ @right.reqStr ++ ")" }

{

-- | Checks whether the given tree holds on a bibtex entry, meaning that
--   all constraints occuring in the `SpecTree` are fullfilled.
isAvail :: BibtexEntry -> SpecTree -> Bool
isAvail t s = avail_Syn_SpecTree $ walkTree t s 

-- | Given a converter function, a bibtex entry and a specification tree
-- runs the attribute grammar.
walkTree :: BibtexEntry -> SpecTree -> Syn_SpecTree
walkTree (Entry t k fs) s = wrap_SpecTree (sem_SpecTree s) inh
    where inh = Inh_SpecTree { etype_Inh_SpecTree = t,
                               fields_Inh_SpecTree = fromList fs,
                               key_Inh_SpecTree = k }

-- | Returns the validated and preprocessed bibtex entry fields. Only defined when `getAvail` returns `True` for the given tree.
getBib r = if getAvail r then bib_Syn_SpecTree r
           else error "getBib is not defined when getAvail returns false."
-- | Returns all error/warning messages. The following law holds:
--   @ getAvail r == (no error in getMsgs r) @
getMsgs = msgs_Syn_SpecTree
-- | Returns `True` if the fold was successful, meaning that validation succeeded.
getAvail = avail_Syn_SpecTree

-------------------------------------------------------------------------------
-- Error messages
-------------------------------------------------------------------------------

-- | Returns a 'Warning' message about two elements being both present.
mutuallyExclusive :: String -> String -> Key -> Message
mutuallyExclusive s1 s2 k = Warning 1 (text w)
  where w = unwords ["Both", s1, "and", s2, "are given,",
                     "but are mutually exclusive in entry", k]

-- | Retuns an 'Error' message about none of two elements being present.
bothMissing :: String -> String -> Key -> Message
bothMissing s1 s2 k = Error (text e)
  where e = unwords ["Neither of", s1, "and", s2, "is given,",
                     "but one of them is required in entry", k] 
 
-- | Returns an 'Error' about a missing field
missing :: Field -> Key -> Message
missing f k = Error (text e)
  where e = unwords ["Required field", show f, "is missing in entry", k]
}
