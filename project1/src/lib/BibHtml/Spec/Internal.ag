-- | This module contains the data types used to define specification rules,
-- and some combinators to conviniently construct such rules.
-- This module is intended for internal use only.

module {BibHtml.Spec.Internal}
{
SpecTree(..),
exactly,
BibHtml.Spec.Internal.either,
both,
optional,
allOf,
someOf,
(<|>)
}

{
import Bibtex
}

-- | A specification tree for the possible fields and combinations thereof in a bibtex entry.
data SpecTree
    | Both left :: SpecTree right :: SpecTree
    | Either left :: SpecTree right :: SpecTree warnBoth :: Bool
    | Optional child :: SpecTree
    | Exactly field  :: Field
deriving SpecTree : Show


-------------------------------------------------------------------------------
-- Exported functions
-------------------------------------------------------------------------------
{
-- | Expects exactly the given field and causes an error if it is not available.
exactly :: Field -> SpecTree
exactly = Exactly

-- | Uses the given `SpecTree` if it is available, else it is just ignored.
--   No warning/error messsages are generated if it is not available.
--   An optional `SpecTree` always return True for `isAvail`.
optional :: SpecTree -> SpecTree
optional = Optional

-- | Expects that exactly one of the two `SpecTree`s is available and returns
--   the html of the available child. If both children are available, the left
--   child is used and a warning message is emitted.
either :: SpecTree -> SpecTree -> SpecTree
either l r = Either l r True

-- | Expects both given `SpecTree`s to be available and concatenates their html output.
both :: SpecTree -> SpecTree -> SpecTree
both = Both

-- | Expects at least one of the given specifications to hold,
--   and uses all holding specifications when pretty printing.
someOf :: SpecTree -> SpecTree -> SpecTree
someOf s1 s2 = Either (Both s1 (Optional s2)) s2 False

-- | Combines all given specification trees using `both`. Undefined for empty lists.
allOf :: [SpecTree] -> SpecTree
allOf [s] = s
allOf ss = foldr1 Both ss

-- | Combines two fields using `either`.
(<|>) :: Field -> Field -> SpecTree
f1 <|> f2 = Either (Exactly f1) (Exactly f2) True
}
